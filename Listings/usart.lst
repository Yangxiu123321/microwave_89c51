C51 COMPILER V9.00   USART                                                                 12/28/2018 20:10:37 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE USART
OBJECT MODULE PLACED IN .\Objects\usart.obj
COMPILER INVOKED BY: D:\program files\keil\C51\BIN\C51.EXE src\usart.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(.\src) DEBU
                    -G OBJECTEXTEND PRINT(.\Listings\usart.lst) TABS(2) OBJECT(.\Objects\usart.obj)

line level    source

   1          /*************************usart.c******************************/
   2          
   3          #include "usart.h"
   4          #include "timer.h"
   5          #include "HD7279.h"
   6          
   7          /****************************串口UART2部分代码存在问题，还没有更改************************
             -****/
   8          
   9          //串口模式初始化
  10          void UARTModeInit(UARTTypeDef_t UARTx, unsigned char UARTMode)
  11          {
  12   1        //根据输入的串口号和模式对相应寄存器进行配置
  13   1        if(UARTx==UART1)
  14   1        {
  15   2          // 低位保持不变
  16   2          SCON=(UARTMode<<6)+(SCON&0x3f);
  17   2        }
  18   1        else if(UARTx==UART2)
  19   1        {
  20   2          S2CON=(UARTMode<<6)+(S2CON&0x3f);
  21   2        }
  22   1      }
  23          
  24          //串口波特率初始化
  25          void UARTBaudrateInit(UARTTypeDef_t UARTx,unsigned char UARTMode, unsigned char isBaudrateDouble, unsigned
             - int baudRate)
  26          {
  27   1        //对波特率是否加倍进行配置
  28   1        if(UARTx==UART1)
  29   1        {
  30   2          // 除TCON外的其他位保持不变
  31   2          PCON=(isBaudrateDouble<<7)+(PCON&0x7f);
  32   2        }
  33   1        else if(UARTx==UART2)
  34   1        {
  35   2        
  36   2        }
  37   1        switch(UARTMode)
  38   1        {
  39   2          case UART_MODE_0:
  40   2          break;
  41   2          case UART_MODE_1:
  42   2            if(UARTx==UART1)
  43   2            {
  44   3              //定时器初始化结构体 
  45   3              timeMode_t timeMode ={0};
  46   3      
  47   3              //对结构体进行赋值
  48   3              timeMode.isGateCrl = noGateCrl;
  49   3              timeMode.timeWorkMode = timer;
  50   3      //        timeMode.timeTriggerMode = innerTrigger;
  51   3              timeMode.timerMode = byteAutoReload;
  52   3              
C51 COMPILER V9.00   USART                                                                 12/28/2018 20:10:37 PAGE 2   

  53   3              //计算波特率对应重装载值并对定时器进行初始化
  54   3              TimeInit(TIM1 ,timeMode ,(int)(1000000/(baudRate*16)), TIMERUS);
  55   3              
  56   3              //选择定时器1作为串口波特率发生器
  57   3              AUXR&=0xfe;
  58   3            }
  59   2            else if(UARTx==UART2)
  60   2            {
  61   3            
  62   3            }
  63   2          break;
  64   2          case UART_MODE_2:
  65   2      
  66   2          break;
  67   2          case UART_MODE_3:
  68   2            if(UARTx==UART1)
  69   2            {
  70   3              //定时器初始化结构体 
  71   3              timeMode_t timeMode ={0};
  72   3      
  73   3              //对结构体进行赋值
  74   3              timeMode.isGateCrl = noGateCrl;
  75   3              timeMode.timeWorkMode = timer;
  76   3      //        timeMode.timeTriggerMode = innerTrigger;
  77   3              timeMode.timerMode = halfWordNotReload;
  78   3              
  79   3              //计算波特率对应重装载值并对定时器进行初始化
  80   3              TimeInit(TIM1 ,timeMode ,(int)(1000000/(baudRate*4)), TIMERUS);
  81   3              
  82   3              //选择定时器1作为串口波特率发生器
  83   3              AUXR&=0xfe;   
  84   3            }
  85   2            else if(UARTx==UART2)
  86   2            {
  87   3            
  88   3            }
  89   2          break;
  90   2          default:
  91   2          break;
  92   2        }
  93   1      }
  94          
  95          sbit RENx = SCON^4;
  96          //串口使能和失能函数
  97          void UARTRxCmd(UARTTypeDef_t UARTx, FunctionalState_t newState)
  98          {
  99   1        //根据输入串口号和状态对相应寄存器进行配置
 100   1        if(UARTx == UART1)
 101   1        {
 102   2          RENx = newState;
 103   2        }
 104   1        else if(UARTx == UART2)
 105   1        {
 106   2          RENx = S2CON^4;
 107   2          RENx = newState;
 108   2        }
 109   1      }
 110          
 111          //读取串口中断标志为函数
 112          FlagStatus UARTGetFlagStatus(UARTTypeDef_t UARTx, unsigned char UARTFlag)
 113          {
 114   1        //根据输入的串口号和要读取的标志位返回对应的标志位值
C51 COMPILER V9.00   USART                                                                 12/28/2018 20:10:37 PAGE 3   

 115   1        if(UARTx==UART1)
 116   1        {
 117   2          if(SCON&UARTFlag)
 118   2          {
 119   3            return SET;
 120   3          }
 121   2          else
 122   2          {
 123   3            return RESET;
 124   3          }
 125   2        }
 126   1        else if(UARTx==UART2)
 127   1        {
 128   2          if(S2CON&UARTFlag)
 129   2          {
 130   3            return SET;
 131   3          }
 132   2          else
 133   2          {
 134   3            return RESET;
 135   3          }
 136   2        }
 137   1        else
 138   1        {
 139   2          return RETURN_ERROR;
 140   2        }
 141   1      }
 142          
 143          //清除串口中断标志位函数
 144          void UARTClearFlagStatus(UARTTypeDef_t UARTx, unsigned char UARTFlag)
 145          {
 146   1        //根据输入的串口号和标志位对相应寄存器进行复位
 147   1        if(UARTx==UART1)
 148   1        {
 149   2          SCON&=(~UARTFlag);
 150   2        }
 151   1        else if(UARTx==UART2)
 152   1        {
 153   2          S2CON&=(~UARTFlag);
 154   2        }
 155   1      }
 156          
 157          //串口发送一个字节函数
 158          void UARTSendByte(UARTTypeDef_t UARTx, unsigned char sendData)
 159          {
 160   1        //根据串口号将发送的数据填入发送寄存器
 161   1        if(UARTx==UART1)
 162   1        {
 163   2          SBUF = sendData;
 164   2        }
 165   1        else if(UARTx==UART2)
 166   1        {
 167   2          S2BUF = sendData;
 168   2      
 169   2        }
 170   1        //等待发送成功
 171   1        while(UARTGetFlagStatus(UARTx,UART_Tx_IT_FLAG)==RESET);
 172   1        UARTClearFlagStatus(UARTx, UART_Tx_IT_FLAG);
 173   1      }
 174          
 175          //串口接收字节函数
 176          unsigned char UARTRecieveByte(UARTTypeDef_t UARTx)
C51 COMPILER V9.00   USART                                                                 12/28/2018 20:10:37 PAGE 4   

 177          {
 178   1        //根据属于的串口号读取接收数据寄存器
 179   1        if(UARTx==UART1)
 180   1        {
 181   2          return SBUF;
 182   2        }
 183   1        else if(UARTx==UART2)
 184   1        {
 185   2          return S2BUF;
 186   2        }
 187   1        else
 188   1        {
 189   2          return RETURN_ERROR;
 190   2        }
 191   1      }
 192          
 193          //串口初始化函数
 194          void UARTInit(UARTTypeDef_t UARTx, UARTMode_t UARTMode, unsigned int baudRate)
 195          {
 196   1        //根据输入进行初始化并使能串口和中断
 197   1        UARTModeInit(UARTx, UARTMode.UARTMode);
 198   1        
 199   1        UARTBaudrateInit(UARTx,UARTMode.UARTMode, UARTMode.isUARTBaudrateDouble, baudRate);
 200   1        
 201   1        UARTITConfig(UARTx, UARTMode.itPriority);
 202   1        
 203   1        UARTRxCmd(UARTx, enable);
 204   1        
 205   1      }
 206          
 207          //串口中断初始化函数
 208          void UARTITConfig(UARTTypeDef_t UARTx, unsigned char UARTPriority)
 209          {
 210   1        //使能中断
 211   1        EA = 1; 
 212   1        //根据输入的串口号和优先级配置相应寄存器
 213   1        if(UARTx==UART1)
 214   1        {
 215   2        
 216   2          ES = 1;
 217   2          PS = UARTPriority;
 218   2        }
 219   1        else if(UARTx==UART2)
 220   1        {
 221   2          IE2|=0x01;
 222   2          IP2|=UARTPriority;
 223   2        }
 224   1      }
 225          
 226          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    523    ----
   CONSTANT SIZE    =      6    ----
   XDATA SIZE       =   ----      15
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
